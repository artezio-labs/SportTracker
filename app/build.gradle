plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'kotlin-parcelize'
    id 'jacoco'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir("reports")
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*', '**/dagger.hilt*.*', '**/*databinding*'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}

android {
    compileSdk 31

    def versionPropsFile = file('version.properties')

    defaultConfig {
        applicationId "com.artezio.osport.tracker"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.artezio.osport.tracker.CustomTestRunner"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {
        debug {
            manifestPlaceholders = [MAP_API_KEY: System.getenv("mapkey") ?: 'AIzaSyD7RxeX40rzTHV0pg5GBdZgJLj6dYWfBOw']
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [MAP_API_KEY: System.getenv("mapkey") ?: 'AIzaSyD7RxeX40rzTHV0pg5GBdZgJLj6dYWfBOw']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.test.ext:junit-ktx:1.1.3'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.2.8'
    implementation 'com.google.firebase:firebase-analytics-ktx:20.1.0'
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    implementation 'com.google.firebase:firebase-database-ktx:20.0.5'
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    // hilt
    implementation "com.google.dagger:hilt-android:2.41"
    kapt "com.google.dagger:hilt-compiler:2.41"
    kapt "androidx.hilt:hilt-compiler:1.0.0"

    // navigation
    def nav_version = "2.4.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // room
    def room_version = "2.4.2"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    // coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'


    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // location
    implementation 'com.google.android.gms:play-services-location:19.0.1'

    // easy-permissions
    implementation 'pub.devrel:easypermissions:3.0.0'

    // lifecycle
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'

    // maps
    implementation 'com.google.android.gms:play-services-maps:18.0.2'

    // lifecycle extensions
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    implementation "androidx.viewpager2:viewpager2:1.0.0"

    // prefs-datastore
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // testing
    testImplementation 'com.google.dagger:hilt-android-testing:2.41'
    kaptTest 'com.google.dagger:hilt-compiler:2.41'
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.41'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.41'
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation "com.android.support:support-annotations:28.0.0"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    testImplementation 'androidx.test:core-ktx:1.4.0'
    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation 'org.robolectric:robolectric:4.7.3'

    // mockito
    def mockk_version = "1.12.3"
    testImplementation "io.mockk:mockk:${mockk_version}"
    androidTestImplementation "io.mockk:mockk-android:${mockk_version}"

    // mapbox
    implementation('com.mapbox.maps:android:10.4.2') { transitive = true }
    implementation("com.mapbox.navigation:android:2.4.0") {
        exclude group: 'android.arch.core'
        transitive = true
    }

    // ui-testing
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'


    // kakao
    androidTestImplementation 'com.agoda.kakao:kakao:2.3.4'
    // kaspresso
    def kaspresso_version = '1.4.1'
    androidTestImplementation "com.kaspersky.android-components:kaspresso:$kaspresso_version"
    androidTestImplementation "com.kaspersky.android-components:kaspresso-allure-support:$kaspresso_version"

    // ui-automator
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'

    // work manager
    implementation 'androidx.work:work-runtime-ktx:2.7.1'
    implementation 'androidx.hilt:hilt-common:1.0.0'
    implementation 'androidx.hilt:hilt-work:1.0.0'

    // avatar-view
    implementation "io.getstream:avatarview-coil:1.0.4"

    // prefs-datastore
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // timber
    implementation 'com.jakewharton.timber:timber:4.7.1'
}

kapt {
    correctErrorTypes true
}

hilt {
    enableTransformForLocalTests = true
}